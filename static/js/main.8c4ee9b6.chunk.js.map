{"version":3,"sources":["components/AppContext.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm/NewCommentForm.tsx","services/AppServices.ts","components/PostDetails/PostDetails.tsx","components/PostsList/PostsList.tsx","components/UserSelector/UserSelector.tsx","components/AppSection/AppSection.tsx","App.tsx","index.tsx"],"names":["AppContext","React","createContext","users","setUsers","selectedUser","setSelectedUser","userPosts","setUserPosts","selectedPost","setSelectedPost","comments","setComments","AppProvider","children","useState","value","useMemo","Provider","Loader","className","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","NewCommentForm","setErrorMessage","name","email","formDate","setFormDate","formErrors","setFormErrors","loading","setLoading","useContext","handleInputChange","e","target","prevData","trimStart","prevErrors","handleSubmit","event","preventDefault","comment","newComment","postId","id","newCommentFromServer","currentComments","catch","finally","onSubmit","htmlFor","cn","type","placeholder","onChange","onClick","PostDetails","errorMessage","activeButton","setActiveButton","useEffect","handleDeleteComment","commentId","prev","filter","getServices","title","length","map","href","message","PostsList","memo","userPost","post","prevPost","UserSelector","showUsers","setShowUsers","role","user","handleUserClick","AppSection","userId","posts","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c4ee9b6.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { User } from '../types/User';\nimport { Context } from '../types/Context';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nexport const AppContext = React.createContext<(Context)>({\n  users: [],\n  setUsers: () => { },\n  selectedUser: null,\n  setSelectedUser: () => { },\n  userPosts: [],\n  setUserPosts: () => { },\n  selectedPost: null,\n  setSelectedPost: () => { },\n  comments: [],\n  setComments: () => { },\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const AppProvider: React.FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const value = useMemo(() => ({\n    users,\n    setUsers,\n    selectedUser,\n    setSelectedUser,\n    userPosts,\n    setUserPosts,\n    selectedPost,\n    setSelectedPost,\n    comments,\n    setComments,\n  }), [users, selectedUser, userPosts, selectedPost, comments]);\n\n  return (\n    <AppContext.Provider value={value}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState, useContext } from 'react';\nimport cn from 'classnames';\nimport * as getService from '../../services/AppServices';\nimport { AppContext } from '../AppContext';\n\ntype Props = {\n  setErrorMessage: (message: string) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ setErrorMessage }) => {\n  const [formDate, setFormDate] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const [formErrors, setFormErrors] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const [loading, setLoading] = useState(false);\n  const { setComments, selectedPost } = useContext(AppContext);\n\n  const handleInputChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = e.target;\n\n    setFormDate((prevData) => ({ ...prevData, [name]: value.trimStart() }));\n    setFormErrors((prevErrors) => ({ ...prevErrors, [name]: false }));\n  };\n\n  const reset = () => {\n    setFormDate({\n      name: '',\n      email: '',\n      body: '',\n    });\n\n    setFormErrors({\n      name: false,\n      email: false,\n      body: false,\n    });\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const { name, email, body } = formDate;\n\n    setFormErrors((prevErrors) => ({ ...prevErrors, name: !name }));\n    setFormErrors((prevErrors) => ({ ...prevErrors, email: !email }));\n    setFormErrors((prevErrors) => ({ ...prevErrors, body: !body }));\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    setLoading(true);\n\n    const newComment = {\n      postId: selectedPost?.id,\n      name,\n      email,\n      body,\n    };\n\n    getService.getCreateComment(newComment)\n      .then(newCommentFromServer => {\n        setComments(currentComments => {\n          return [...currentComments, newCommentFromServer];\n        });\n        setFormDate((prevData) => ({ ...prevData, body: '' }));\n      })\n      .catch(() => setErrorMessage('Something went wrong!'))\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className={cn('control has-icons-left', {\n          'has-icons-right': formErrors.name,\n        })}\n        >\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': formErrors.name })}\n            value={formDate.name}\n            onChange={handleInputChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {formErrors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formErrors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className={cn('control has-icons-left', {\n          'has-icons-right': formErrors.email,\n        })}\n        >\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': formErrors.email })}\n            value={formDate.email}\n            onChange={handleInputChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {formErrors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formErrors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className={cn('control', {\n          'has-icons-right': formErrors.body,\n        })}\n        >\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('input', { 'is-danger': formErrors.body })}\n            value={formDate.body}\n            onChange={handleInputChange}\n          />\n        </div>\n\n        {formErrors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', { 'is-loading': loading })}\n            onClick={handleSubmit}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={reset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\nexport function getPostComments(postId: number) {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n}\n\nexport function getCreateComment(comment: CommentData) {\n  return client.post<Comment>('/comments', comment);\n}\n\nexport function getUserPosts(userId: number) {\n  return client.get<Post[]>('/posts')\n    .then(posts => posts.filter(post => post.userId === userId));\n}\n\nexport function getUsers() {\n  return client.get<User[]>('/users');\n}\n\nexport function getDeleteComment(commentId: number) {\n  return client.delete(`/comments/${commentId}`);\n}\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm/NewCommentForm';\nimport { AppContext } from '../AppContext';\nimport * as getServices from '../../services/AppServices';\n\nexport const PostDetails: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [activeButton, setActiveButton] = useState(true);\n\n  const { selectedPost, setComments, comments } = useContext(AppContext);\n\n  useEffect(() => {\n    setErrorMessage('');\n    setActiveButton(true);\n\n    if (selectedPost) {\n      setLoading(true);\n      setErrorMessage('');\n\n      getServices.getPostComments(selectedPost.id)\n        .then(setComments)\n        .catch(() => setErrorMessage('Something went wrong!'))\n        .finally(() => setLoading(false));\n    }\n  }, [selectedPost, setComments]);\n\n  const handleFormComments = () => {\n    setActiveButton(false);\n  };\n\n  const handleDeleteComment = (commentId: number) => {\n    setErrorMessage('');\n    setComments(prev => prev.filter(comment => comment.id !== commentId));\n\n    getServices.getDeleteComment(commentId)\n      .catch(() => setErrorMessage('Something went wrong!'));\n  };\n\n  return (\n    <>\n      {selectedPost && (\n        <div className=\"content\" data-cy=\"PostDetails\">\n          <div className=\"content\" data-cy=\"PostDetails\">\n            <div className=\"block\">\n              <h2 data-cy=\"PostTitle\">\n                {`${selectedPost?.id}: ${selectedPost?.title}`}\n              </h2>\n\n              <p data-cy=\"PostBody\">\n                {selectedPost?.body}\n              </p>\n            </div>\n\n            <div className=\"block\">\n              {!errorMessage && (\n                <>\n                  {loading && <Loader />}\n\n                  {!loading && comments?.length === 0 ? (\n                    <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                      No comments yet\n                    </p>\n                  ) : (\n                    <>\n                      <p className=\"title is-4\">Comments: </p>\n                      <>\n                        {comments?.map(comment => (\n                          <article\n                            className=\"message is-small\"\n                            data-cy=\"Comment\"\n                            key={comment.id}\n                          >\n                            <div className=\"message-header\">\n                              <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                                {comment.name}\n                              </a>\n                              <button\n                                data-cy=\"CommentDelete\"\n                                type=\"button\"\n                                className=\"delete is-small\"\n                                aria-label=\"delete\"\n                                onClick={() => handleDeleteComment(comment.id)}\n                              >\n                                delete button\n                              </button>\n                            </div>\n                            <div className=\"message-body\" data-cy=\"CommentBody\">\n                              {comment.body}\n                            </div>\n                          </article>\n                        ))}\n                      </>\n                    </>\n                  )}\n\n                  {!loading && activeButton && (\n                    <button\n                      data-cy=\"WriteCommentButton\"\n                      type=\"button\"\n                      className=\"button is-link\"\n                      onClick={handleFormComments}\n                    >\n                      Write a comment\n                    </button>\n                  )}\n                </>\n              )}\n\n              {errorMessage && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  {errorMessage}\n                </div>\n              )}\n            </div>\n\n            {!activeButton && !errorMessage && (\n              <NewCommentForm\n                setErrorMessage={(message) => setErrorMessage(message)}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useContext } from 'react';\nimport cn from 'classnames';\nimport { AppContext } from '../AppContext';\nimport { Post } from '../../types/Post';\n\nexport const PostsList: React.FC = React.memo(() => {\n  const {\n    userPosts,\n    setSelectedPost,\n    selectedPost,\n    setComments,\n  } = useContext(AppContext);\n\n  const handleClickPost = (post: Post) => {\n    setComments([]);\n\n    setSelectedPost(prevPost => {\n      if (prevPost?.id !== post.id) {\n        return post;\n      }\n\n      return null;\n    });\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts.map(userPost => (\n            <tr data-cy=\"Post\" key={userPost.id}>\n              <td data-cy=\"PostId\">{userPost.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {userPost.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn('button is-link', {\n                    'is-light': userPost.id !== selectedPost?.id,\n                  })}\n                  onClick={() => handleClickPost(userPost)}\n                >\n                  {userPost.id === selectedPost?.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n","import React, { useContext, useState } from 'react';\nimport cn from 'classnames';\nimport { AppContext } from '../AppContext';\nimport { User } from '../../types/User';\n\nexport const UserSelector: React.FC = React.memo(() => {\n  const [showUsers, setShowUsers] = useState(false);\n  const {\n    users,\n    selectedUser,\n    setSelectedUser,\n    setSelectedPost,\n    setComments,\n  } = useContext(AppContext);\n\n  const handleUserClick = (user: User) => {\n    setSelectedUser(user);\n    setShowUsers(false);\n    setSelectedPost(null);\n    setComments([]);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', { 'is-active': showUsers })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setShowUsers(!showUsers)}\n        >\n          <span>\n            {!selectedUser\n              ? 'Choose a user'\n              : `${selectedUser.name}`}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href={`#user${user.id}`}\n              key={user.id}\n              className={cn('dropdown-item', {\n                'is-active': selectedUser && selectedUser.id === user.id,\n              })}\n              onClick={() => handleUserClick(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, { useContext, useEffect, useState } from 'react';\nimport cn from 'classnames';\n\nimport { PostDetails } from '../PostDetails';\nimport { PostsList } from '../PostsList';\nimport { Loader } from '../Loader';\nimport { UserSelector } from '../UserSelector';\nimport { AppContext } from '../AppContext';\nimport * as getService from '../../services/AppServices';\n\nexport const AppSection: React.FC = () => {\n  const {\n    setUsers,\n    selectedUser,\n    userPosts,\n    setUserPosts,\n    selectedPost,\n  } = useContext(AppContext);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    getService.getUsers()\n      .then(setUsers)\n      .catch();\n  }, [setUsers]);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setErrorMessage('');\n      setLoading(true);\n\n      getService.getUserPosts(selectedUser.id)\n        .then(setUserPosts)\n        .catch(() => setErrorMessage('Something went wrong!'))\n        .finally(() => setLoading(false));\n    }\n  }, [setUserPosts, selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!errorMessage && (\n                  <>\n                    {!selectedUser ? (\n                      <p data-cy=\"NoSelectedUser\">\n                        No user selected\n                      </p>\n                    ) : (\n                      <>\n                        {loading && <Loader />}\n\n                        {!loading && userPosts.length === 0 ? (\n                          <div\n                            className=\"notification is-warning\"\n                            data-cy=\"NoPostsYet\"\n                          >\n                            No posts yet\n                          </div>\n                        ) : <PostsList /> }\n                      </>\n                    )}\n                  </>\n                )}\n\n                {errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import React from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { AppProvider } from './components/AppContext';\nimport { AppSection } from './components/AppSection';\n\nexport const App: React.FC = () => {\n  return (\n    <AppProvider>\n      <AppSection />\n    </AppProvider>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}